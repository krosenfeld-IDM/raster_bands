{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Raster Bands Extract bands from a multi-channel raster. Requires GDAL. This can be useful if you're trying to open a .tiff file using Pillow and run into something like: More samples per pixel than can be decoded: 24 Traceback (most recent call last): File \"open_sesame.py\", line 13, in <module> raster = Image.open(raster_file) File \"/home/user/.venv/lib/python3.10/site-packages/PIL/Image.py\", line 3532, in open raise UnidentifiedImageError(msg) Recommended usage Using pixi : pixi install scripts/extract_bands.py provides an example to extract and save individual bands from a file.","title":"Home"},{"location":"#raster-bands","text":"Extract bands from a multi-channel raster. Requires GDAL. This can be useful if you're trying to open a .tiff file using Pillow and run into something like: More samples per pixel than can be decoded: 24 Traceback (most recent call last): File \"open_sesame.py\", line 13, in <module> raster = Image.open(raster_file) File \"/home/user/.venv/lib/python3.10/site-packages/PIL/Image.py\", line 3532, in open raise UnidentifiedImageError(msg)","title":"Raster Bands"},{"location":"#recommended-usage","text":"Using pixi : pixi install scripts/extract_bands.py provides an example to extract and save individual bands from a file.","title":"Recommended usage"},{"location":"autoapi/summary/","text":"raster_bands Index extract","title":"Summary"},{"location":"autoapi/raster_bands/","text":"","title":"Index"},{"location":"autoapi/raster_bands/extract/","text":"extract_all_bands(input_raster, output_dir) Extracts all bands from a raster and saves them as separate GeoTIFF files. Parameters: Name Type Description Default input_raster str Path to the input raster file. required output_dir str Directory where the output GeoTIFF files will be saved. required Source code in src/raster_bands/extract.py def extract_all_bands(input_raster: Union[str, Path], output_dir: Union[str, Path]): \"\"\" Extracts all bands from a raster and saves them as separate GeoTIFF files. Parameters: input_raster (str): Path to the input raster file. output_dir (str): Directory where the output GeoTIFF files will be saved. \"\"\" input_raster = Path(input_raster) with gdal.Open(input_raster, gdal.GA_ReadOnly) as raster: # Get the number of bands if raster is not None: num_bands = raster.RasterCount print(f\"Number of bands: {num_bands}\") else: print(\"Failed to open raster file.\") for band_number in tqdm(range(1, num_bands + 1)): extract_band(input_raster, Path(output_dir) / f\"{input_raster.stem}_band{band_number}.tif\", band_number) extract_band(input_raster, output_raster, band_number) Extracts a specified band from a raster and saves it as a new GeoTIFF file. Parameters: Name Type Description Default input_raster str Path to the input raster file. required output_raster str Path to the output GeoTIFF file. required band_number int The band number to extract (1-based index). required Source code in src/raster_bands/extract.py def extract_band(input_raster: Union[str, Path], output_raster: Union[str, Path], band_number: int): \"\"\" Extracts a specified band from a raster and saves it as a new GeoTIFF file. Parameters: input_raster (str): Path to the input raster file. output_raster (str): Path to the output GeoTIFF file. band_number (int): The band number to extract (1-based index). \"\"\" # Open the input raster dataset = gdal.Open(input_raster, gdal.GA_ReadOnly) if dataset is None: raise RuntimeError(\"Failed to open input raster.\") # Select the band to extract (1-based index) band = dataset.GetRasterBand(band_number) # Get metadata from original dataset geotransform = dataset.GetGeoTransform() projection = dataset.GetProjection() nodata_value = band.GetNoDataValue() # Get raster dimensions cols = dataset.RasterXSize rows = dataset.RasterYSize # Create the output raster with the same dimensions as the input driver = gdal.GetDriverByName(\"GTiff\") out_dataset = driver.Create(output_raster, cols, rows, 1, band.DataType) # Write the band data to the output file out_band = out_dataset.GetRasterBand(1) out_band.WriteArray(band.ReadAsArray()) # Set metadata for the output raster out_dataset.SetGeoTransform(geotransform) out_dataset.SetProjection(projection) if nodata_value is not None: out_band.SetNoDataValue(nodata_value) # Flush data and close files out_band.FlushCache() out_dataset = None dataset = None print(f\"Single band {band_number} written to {output_raster}\")","title":"extract"},{"location":"autoapi/raster_bands/extract/#raster_bands.extract.extract_all_bands","text":"Extracts all bands from a raster and saves them as separate GeoTIFF files. Parameters: Name Type Description Default input_raster str Path to the input raster file. required output_dir str Directory where the output GeoTIFF files will be saved. required Source code in src/raster_bands/extract.py def extract_all_bands(input_raster: Union[str, Path], output_dir: Union[str, Path]): \"\"\" Extracts all bands from a raster and saves them as separate GeoTIFF files. Parameters: input_raster (str): Path to the input raster file. output_dir (str): Directory where the output GeoTIFF files will be saved. \"\"\" input_raster = Path(input_raster) with gdal.Open(input_raster, gdal.GA_ReadOnly) as raster: # Get the number of bands if raster is not None: num_bands = raster.RasterCount print(f\"Number of bands: {num_bands}\") else: print(\"Failed to open raster file.\") for band_number in tqdm(range(1, num_bands + 1)): extract_band(input_raster, Path(output_dir) / f\"{input_raster.stem}_band{band_number}.tif\", band_number)","title":"extract_all_bands"},{"location":"autoapi/raster_bands/extract/#raster_bands.extract.extract_band","text":"Extracts a specified band from a raster and saves it as a new GeoTIFF file. Parameters: Name Type Description Default input_raster str Path to the input raster file. required output_raster str Path to the output GeoTIFF file. required band_number int The band number to extract (1-based index). required Source code in src/raster_bands/extract.py def extract_band(input_raster: Union[str, Path], output_raster: Union[str, Path], band_number: int): \"\"\" Extracts a specified band from a raster and saves it as a new GeoTIFF file. Parameters: input_raster (str): Path to the input raster file. output_raster (str): Path to the output GeoTIFF file. band_number (int): The band number to extract (1-based index). \"\"\" # Open the input raster dataset = gdal.Open(input_raster, gdal.GA_ReadOnly) if dataset is None: raise RuntimeError(\"Failed to open input raster.\") # Select the band to extract (1-based index) band = dataset.GetRasterBand(band_number) # Get metadata from original dataset geotransform = dataset.GetGeoTransform() projection = dataset.GetProjection() nodata_value = band.GetNoDataValue() # Get raster dimensions cols = dataset.RasterXSize rows = dataset.RasterYSize # Create the output raster with the same dimensions as the input driver = gdal.GetDriverByName(\"GTiff\") out_dataset = driver.Create(output_raster, cols, rows, 1, band.DataType) # Write the band data to the output file out_band = out_dataset.GetRasterBand(1) out_band.WriteArray(band.ReadAsArray()) # Set metadata for the output raster out_dataset.SetGeoTransform(geotransform) out_dataset.SetProjection(projection) if nodata_value is not None: out_band.SetNoDataValue(nodata_value) # Flush data and close files out_band.FlushCache() out_dataset = None dataset = None print(f\"Single band {band_number} written to {output_raster}\")","title":"extract_band"}]}